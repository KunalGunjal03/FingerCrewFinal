import React, { useState, useEffect } from 'react';
import { Field, Form, Formik } from 'formik';
import { Input, Button, FormItem, FormContainer,select } from 'components/ui';
import { saveUserData, saveRoleOptions } from 'services/userApi.js';
import { components } from 'react-select'
import * as Yup from 'yup';

  return (
    <>
      <div className="mb-8">
        <h3 className="mb-2">Edit User</h3>
      </div>
      <Formik
        initialValues={data}
        enableReinitialize={true}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
      >
        {({ values, touched, errors, isSubmitting }) => (
          <Form>
            <FormContainer>
              <div className="md:grid grid-cols-2 gap-4">
                <FormItem
                  label="User Name"
                >
                  <Field
                    type="text"
                    autoComplete="off"
                    name="username"
                  />
                </FormItem>
                <FormItem
                  label="User Full Name"
                >
                  <Field
                    type="text"
                    autoComplete="off"
                    name="user_fullname"
                  />
                </FormItem>
              </div>
              <div className="md:grid grid-cols-2 gap-4">
                <FormItem
                  label="Email"
                >
                  <Field
                    type="email"
                    autoComplete="off"
                    name="user_mail_id"
                    
                  />
                </FormItem>
                <FormItem
                  label="Contact Number"
                >
                  <Field
                    type="text"
                    autoComplete="off"
                    name="contact_detail"
                  />
                </FormItem>
              </div>
              <div className="md:grid grid-cols-2 gap-4">
              {/* <FormItem
                  label="User Role"
                  invalid={errors.user_role && touched.user_role}
                  errorMessage={errors.user_role}
                > 
              </FormItem> 
                <select name="user_role" placeholder="Select Role">
                  <option value="">Select Role</option>
                  {roleOptions.length > 0 &&
                    roleOptions.map((role) => (
                      <option key={role.roleid} value={role.roleid}>
                        {role.roledescription}
                      </option>
                    ))}
                </select>  */}
                <FormItem
                  label="User Role"
                  invalid={errors.user_role && touched.user_role}
                  errorMessage={errors.user_role}
                >
                  <Field name="user_role">
                    {({ field, form }) => (
                      <select
                        placeholder="Select Role"
                        field={field}
                        form={form}
                        options={roleOptions}
                        // value={roleOptions.find(
                        //   (role) => role.roleid === values.roledescription
                        // )}
                        // onChange={(selectedRole) =>
                        //   form.setFieldValue(field.name, selectedRole.roleid)
                        // }
                      />
                    )}
                  </Field>
                </FormItem>

                <FormItem
                  label="allowMultipleRoles"
                >
                  <Field
                    type="number"
                    autoComplete="off"
                    name="allowMultipleRoles"
                  />
                </FormItem>
              </div>
              <div className="md:grid grid-cols-2 gap-4">
                <FormItem
                  label="employee_code"
                >
                  <Field
                    type="text"
                    autoComplete="off"
                    name="employee_code"
                  />
                </FormItem>
                <FormItem
                  label="password"
                >
                  <Field
                    type="text"
                    autoComplete="off"
                    name="password"
                  />
                </FormItem>
              </div>
              <FormItem
                label="roleid"
              >
                <Field
                  type="number"
                  autoComplete="off"
                  name="roleid"
                />
              </FormItem>
              <div className="flex justify-end gap-2">
                <Button loading={isSubmitting} variant="solid" type="submit">
                  Save
                </Button>
              </div>
            </FormContainer>
          </Form>
        )}
      </Formik>
    </>
  );

export default AddUser;

